#!/bin/bash

# === BASIC CONFIGURATION ===
hostnamectl set-hostname machine1.pclabs.id
sed -i 's/^#\?PermitRootLogin.*/PermitRootLogin yes/' /etc/ssh/sshd_config && systemctl restart ssh

# === USER & GROUP ===
groupadd pclabs
groupadd hmti
useradd -m -G pclabs bumi
useradd -m -G pclabs,hmti hammam
useradd -m -G pclabs backupuser
useradd -m -G pclabs ridho
useradd -m -u 2025 -s /sbin/nologin denis
echo 'rangers' | passwd --stdin bumi 2>/dev/null || echo 'rangers' | passwd bumi

# === FILE PERMISSIONS ===
mkdir -p /data/sacr
chown bumi:pclabs /data/sacr
chmod 760 /data/sacr
chattr +i /data/sacr
cp /etc/passwd /data/sacr/info.txt
chown ridho:ridho /data/sacr/info.txt
chmod 400 /data/sacr/info.txt

# === BASH SCRIPTING ===
echo -e '#!/bin/bash\nread -p "Enter your username: " name\necho "Hello, $name! Welcome to the system."' > /usr/local/bin/greetuser
chmod +x /usr/local/bin/greetuser
echo -e '#!/bin/bash\nread -p "Enter your name: " name\necho "Welcome, $name!"' > /usr/local/bin/welkem.sh
chmod +x /usr/local/bin/welkem.sh

# === DOCKER WEB ===
apt install -y git docker.io
git clone https://github.com/Merpatipatipati/Project_707.git
cd Project_707
cp templet.txt index.html
cat <<EOF > Dockerfile
FROM nginx:alpine
COPY index.html /usr/share/nginx/html/index.html
COPY default.conf /etc/nginx/conf.d/default.conf
EOF
docker build -t sacr-web-image .
docker run -d --name sacr-web-con -p 8080:80 sacr-web-image
cd ..

# === PARTITIONING ===
mkfs.ext4 /dev/sdX1
mkdir -p /mnt/data_backup
mount /dev/sdX1 /mnt/data_backup
echo "UUID=$(blkid -s UUID -o value /dev/sdX1) /mnt/data_backup ext4 defaults 0 2" >> /etc/fstab
mkdir /mnt/data_backup/ssh_logs
chown -R backupuser:pclabs /mnt/data_backup
chmod -R 775 /mnt/data_backup

# === LVM ===
pvcreate /dev/sdX1 /dev/sdX2 /dev/sdX3
vgcreate pclabs_data_storage /dev/sdX1 /dev/sdX2
vgcreate pclabs_log_storage /dev/sdX3
lvcreate -L 350M -n data_store_1 pclabs_data_storage
lvcreate -L 350M -n data_store_2 pclabs_data_storage
lvcreate -L 200M -n ssh_log_store pclabs_log_storage
mkfs.ext4 /dev/pclabs_data_storage/data_store_1
mkfs.ext4 /dev/pclabs_data_storage/data_store_2
mkfs.ext4 /dev/pclabs_log_storage/ssh_log_store
mkdir -p /mnt/pclab_data_1 /mnt/pclab_data_2 /mnt/pclab_ssh_log
echo -e "$(blkid -s UUID -o value /dev/pclabs_data_storage/data_store_1) /mnt/pclab_data_1 ext4 defaults 0 2\n$(blkid -s UUID -o value /dev/pclabs_data_storage/data_store_2) /mnt/pclab_data_2 ext4 defaults 0 2\n$(blkid -s UUID -o value /dev/pclabs_log_storage/ssh_log_store) /mnt/pclab_ssh_log ext4 defaults 0 2" >> /etc/fstab
mount -a
chown -R backupuser:pclabs /mnt/*
chmod -R 775 /mnt/*

# === NFS (machine1) ===
apt install -y nfs-kernel-server
echo "/mnt/data_backup machine2.pclabs.id(rw,sync,no_subtree_check)" >> /etc/exports
exportfs -a
systemctl restart nfs-kernel-server

# === AUTOFS (machine2) ===
apt install -y autofs
echo "/mnt/backup /etc/auto.nfs --timeout=60" >> /etc/auto.master
echo "backup -fstype=nfs,rw machine1.pclabs.id:/mnt/data_backup" > /etc/auto.nfs
systemctl restart autofs

# === SSH LOGGING & CRONJOB ===
sed -i 's/^#\?LogLevel.*/LogLevel VERBOSE/' /etc/ssh/sshd_config
echo "auth,authpriv.*        /mnt/pclab_ssh_log/auth.log" >> /etc/rsyslog.d/50-default.conf
systemctl restart ssh rsyslog
cat <<EOF > /usr/local/bin/backup_ssh_log.sh
#!/bin/bash
TIMESTAMP=\$(date +\\%Y-\\%m-\\%d_\\%H-\\%M)
cp /mnt/pclab_ssh_log/auth.log /mnt/backup/backup_auth_\$TIMESTAMP.log
EOF
chmod +x /usr/local/bin/backup_ssh_log.sh
(crontab -l 2>/dev/null; echo "59 23 * * * /usr/local/bin/backup_ssh_log.sh") | crontab -

# === ANSIBLE SETUP ===
mkdir -p ~/ansible && cd ~/ansible
cat <<EOF > inventory
[machine1]
machine1.pclabs.id

[machine2]
machine2.pclabs.id

[all:vars]
ansible_user=sacr
ansible_ssh_pass=rangers
ansible_python_interpreter=/usr/bin/python3
EOF

cat <<EOF > default.yml
- name: Configure Basic Setup
  hosts: all
  become: true
  tasks:
    - name: Create a new user 'managed' with /bin/bash shell
      ansible.builtin.user:
        name: managed
        shell: /bin/bash
        state: present

    - name: Create a new group 'cyberranger'
      ansible.builtin.group:
        name: cyberranger
        state: present

- name: Add 'managed' to 'cyberranger' group on machine1
  hosts: machine1
  become: true
  tasks:
    - name: Add 'managed' to 'cyberranger' group
      ansible.builtin.user:
        name: managed
        groups: cyberranger
        append: yes
EOF

ansible -i inventory all -m ping
ansible-playbook -i inventory default.yml --ask-become-pass
